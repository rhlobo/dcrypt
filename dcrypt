#! /bin/bash


# Precondition check for root powers
if [[ $EUID -ne 0 ]]; then
    echo "ERROR: This script must be run as root ... Exiting"
    exit 1
fi


# VARIABLES ###################################################################
_USER=${SUDO_USER}
_HOME=$(eval echo ~${_USER})

# Script base directory (resolving symlinks)
_BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    _BASEDIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$_BASEDIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
_BASEDIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"


# FUNCTION DEFINITION #########################################################
# Displays help message
display_help(){
    local MESSAGE=$1
    [ ! -z "${MESSAGE}" ] && echo "${MESSAGE}"
    cat <<EOF

Usage: $0 luks|tcrypt|vcrypt open|close <name> [DEVICE] [OPTIONS]

OPTIONS:
    --key-file, -h      Keyfile to use when opening an encrypted disk
    --read-only, -r     Map disk as read only
    --help, -h          This help

EOF
}


# PARSE CLI ARGUMENTS #########################################################
# luks|tcrypt open|close <name> [device]

# Default option values
_EXT_KEYFILE=""
_READ_ONLY=false

# Pasing input parameters
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        -h|--help)
            display_help
            exit 0
            ;;
        -k|--key-file)
            _EXT_KEYFILE="$2"
            shift
            shift
            ;;
        -r|--read-only)
            _READ_ONLY=true
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Parsing Positional Params
_METHOD=$1
_COMMAND=$2
_NAME=$3
_DEVBLK=$4

# Checking Params
[ -z "${_NAME}" ] && {
    display_help "ERROR: obligatory 'name' parameter is missing."
    exit 1
}

case $_METHOD in
luks|tcrypt|vcrypt)
;;
*)
    display_help "ERROR: Unrecognized encryption mechanism. Should be 'luks', 'tcrypt' or 'vcrypt'..."
    exit 1
;;
esac

case $_COMMAND in
open)
    [ -z "${_DEVBLK}" ] && {
        _DEVBLK=$(/bin/bash -c "${_BASEDIR}/dmap device ${_NAME}")
        [ -z "${_DEVBLK}" ] && {
            display_help "ERROR: Device not mapped on dmap or not present. Please inform desired device."
	    exit 1
        }
    }
;;
close)
    [ ! -z "${_DEVBLK}" ] && display_help "WARN: Device param not needed on close operations."
;;
*)
    display_help "ERROR: Unrecognized command. Should be 'open' or 'close'..."
    exit 1
;;
esac


# MAIN ########################################################################
_MNTDIR="/mnt/${_NAME}"


# EXECUTING OPEN COMMAND
[[ "${_COMMAND}" == "open" ]] && {
    # Checking if already mounted
    mountpoint -q ${_MNTDIR} && {
        echo "WARN: ${_MNTDIR} already mounted."
        exit 0
    }

    # Checking if device block exists
    test -e ${_DEVBLK} || {
        echo "- Block device could not be found."
        exit 1
    }

    # Checking if already mapped
    test -e /dev/mapper/${_NAME} || {

        # VERIFYNG KEYFILES
        ${_BASEDIR}/dcryptkey test ${_NAME} && _HAS_KEYFILE=true || _HAS_KEYFILE=false
        [ -z "${_EXT_KEYFILE}" ] || {
            test -f "${_EXT_KEYFILE}" && {
                _KEYFARG=" --key-file=${_EXT_KEYFILE} "
            }
        }

        # PREPARING ARGUMENTS FOR WRITE/READ OR READ ONLY MAPPING
        [ "${_READ_ONLY}" = true ] && _RW_PARAM=" --readonly " || _RW_PARAM=""

        # DECRYPTING
        case $_METHOD in
        luks)
            # Decrypting LUKS volume
            [ "${_HAS_KEYFILE}" = true ] && {
                ${_BASEDIR}/dcryptkey echo "${_NAME}" | cryptsetup luksOpen ${_DEVBLK} ${_NAME} --key-file=-
            } || cryptsetup "${_RW_PARAM}" luksOpen ${_DEVBLK} ${_NAME}
            ;;
        tcrypt)
            # Decrypting TCRYPT volume
            [ "${_HAS_KEYFILE}" = true ] && {
                ${_BASEDIR}/dcryptkey echo "${_NAME}" | cryptsetup --type tcrypt open ${_DEVBLK} ${_NAME} ${_KEYFARG}
            } || cryptsetup "${_RW_PARAM}" --type tcrypt open ${_DEVBLK} ${_NAME} ${_KEYFARG}
            ;;
        vcrypt)
            # Decrypting VERACRYPT volume
            [ "${_HAS_KEYFILE}" = true ] && {
                ${_BASEDIR}/dcryptkey echo "${_NAME}" | cryptsetup --type tcrypt --veracrypt open ${_DEVBLK} ${_NAME} ${_KEYFARG}
            } || cryptsetup "${_RW_PARAM}" --type tcrypt --veracrypt open ${_DEVBLK} ${_NAME} ${_KEYFARG}
            ;;
        esac
    }

    # Checking if volume was opened
    test -e /dev/mapper/${_NAME} && {
        echo "- ${_METHOD^^} volume opened ..."

        # Mounting
        mkdir -p "${_MNTDIR}"
        chown ${_USER}:${_USER} "${_MNTDIR}"
        mount /dev/mapper/${_NAME} "${_MNTDIR}" && {
            echo "- Mounted ${_MNTDIR}"
            exit 0
        } || echo "- ERROR mounting ${_MNTDIR}"
    } || echo "- Could not open ${_METHOD^^} volume."
    exit 1
}


# EXECUTING CLOSE COMMAND
[[ "${_COMMAND}" == "close" ]] && {
    # Checking if volume is mapped
    test -e /dev/mapper/${_NAME} && {
        #Checking if umounting is needed
        mountpoint -q ${_MNTDIR} && {
            # Umounting
            umount ${_MNTDIR} &> /dev/null || umount -f ${_MNTDIR}
        }

        case $_METHOD in
        luks)
            # Closing LUKS volume
            cryptsetup luksClose ${_NAME} &> /dev/null  || echo "ERROR on cryptsetup luksClose."
            ;;
        tcrypt|vcrypt)
            # Closing TCRYPT (including VeraCrypt) volume
            cryptsetup close ${_NAME} &> /dev/null || echo "ERROR on cryptsetup TRUECRYPT close."
            ;;
        esac

        test -e /dev/mapper/${_NAME} && {
            echo "- ERROR: Could not close ${_NAME}."
            exit 1
        } || echo "- ${_METHOD^^} partition closed!"
    } || echo "- ${_METHOD^^} partition seems to be closed."
}
